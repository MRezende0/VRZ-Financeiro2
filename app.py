import streamlit as st
import pandas as pd
import plotly.express as px
import os

########################################## CONFIGURA√á√ÉO ##########################################

# Configura√ß√£o inicial da p√°gina
st.set_page_config(
    page_title="VRZ Gest√£o Financeira",
    page_icon="üí∏",
    layout="wide",
)

# Estilo personalizado
def add_custom_css():
    st.markdown("""
        <style>
            [data-testid="stSidebar"] {
                background-color: #f8f9fa;
                padding: 20px;
            }
            h1, h2, h3 {
                color: #ff6411;
                font-weight: bold;
            }
            .card {
                background-color: #f8f9fa;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                margin: 10px;
                text-align: center;
            }
            .card h3 {
                margin-bottom: 10px;
                color: #333333;
            }
            .card p {
                font-size: 1.5rem;
                font-weight: bold;
                color: #4caf50;
            }
            .stApp {
                background-color: #fff;
            }
        </style>
    """, unsafe_allow_html=True)

add_custom_css()

########################################## CREDENCIAIS ##########################################

# Carrega credenciais dos Secrets
USER_CREDENTIALS = {
    st.secrets["USER_EMAIL"]: st.secrets["USER_PASSWORD"],
    st.secrets["ADMIN_EMAIL"]: st.secrets["ADMIN_PASSWORD"],
}

########################################## DADOS ##########################################

# Caminho dos arquivos CSV
RECEITAS_PATH = "dados/receitas.csv"
DESPESAS_PATH = "dados/despesas.csv"
PROJETOS_PATH = "dados/projetos.csv"

# Fun√ß√£o para carregar dados
def carregar_dados(caminho, colunas):
    if os.path.exists(caminho):
        return pd.read_csv(caminho)
    else:
        return pd.DataFrame(columns=colunas)

# Carrega os dados iniciais
df_receitas = carregar_dados(RECEITAS_PATH, ["DataRecebimento", "Projeto", "Categoria", "ValorTotal", "FormaPagamento", "NF"])
df_despesas = carregar_dados(DESPESAS_PATH, ["DataPagamento", "Descri√ß√£o", "Categoria", "ValorTotal", "FormaPagamento", "Respons√°vel", "Fornecedor", "Projeto", "NF"])
df_projetos = carregar_dados(PROJETOS_PATH, ["Projeto", "Cliente", "Localizacao", "Placa", "Post", "DataInicio", "DataFinal", "Contrato", "Status", "Briefing", "Arquiteto", "Tipo", "Pacote", "m2", "Parcelas", "ValorTotal", "Respons√°velEl√©trico", "Respons√°velHidr√°ulico", "Respons√°velModelagem", "Respons√°velDetalhamento"])

########################################## LOGIN ##########################################

# Fun√ß√£o de login
def login(email, senha):
    if email in USER_CREDENTIALS and USER_CREDENTIALS[email] == senha:
        return True
    return False

# Tela de Login
def login_screen():
    st.title("üîê Login - VRZ Gest√£o Financeira")
    st.markdown("Por favor, insira suas credenciais para acessar o sistema.")

    # Formul√°rio de login
    with st.form("login_form"):
        email = st.text_input("E-mail")
        password = st.text_input("Senha", type="password")
        submit = st.form_submit_button("Entrar")

    if submit:
        if login(email, password):
            st.success("Login feito com sucesso!")
            st.session_state["logged_in"] = True
            st.rerun()
        else:
            st.error("Credenciais inv√°lidas. Verifique seu e-mail e senha.")

########################################## TRANSA√á√ïES ##########################################

# Fun√ß√£o para salvar dados
def salvar_dados(df, caminho):
    df.to_csv(caminho, index=False)

# Tela de Registrar Receita
def registrar_receita():
    global df_receitas  # Declara df_receitas como global
    st.title("üí∏ Registrar Receita")

    with st.form("form_receita"):
        DataRecebimento = st.date_input("Data de Recebimento")
        Projeto = st.selectbox("Projeto", df_projetos["Projeto"].unique())
        Categoria = st.selectbox("Categoria", ["Pr√≥-Labore", "Investimentos", "Freelance", "Outros"])
        ValorTotal = st.number_input("Valor", min_value=0.0, step=1.0, format="%.2f")
        FormaPagamento = st.selectbox("Forma de Pagamento", ["Pix", "TED", "Dinheiro"])
        NF = st.selectbox("Nota Fiscal", ["Sim", "N√£o"])
        submit = st.form_submit_button("Salvar Receita")

    if submit:
        nova_receita = pd.DataFrame({
            "DataRecebimento": [DataRecebimento],
            "Projeto": [Projeto],
            "Categoria": [Categoria],
            "ValorTotal": [ValorTotal],
            "FormaPagamento": [FormaPagamento],
            "NF": [NF]
        })
        df_receitas = pd.concat([df_receitas, nova_receita], ignore_index=True)
        salvar_dados(df_receitas, RECEITAS_PATH)
        st.success("Receita registrada com sucesso!")

# Tela de Registrar Despesa
def registrar_despesa():
    global df_despesas  # Declara df_despesas como global
    st.title("üí∏ Registrar Despesa")

    with st.form("form_despesa"):
        DataPagamento = st.date_input("Data de Pagamento")
        Descricao = st.text_input("Descri√ß√£o")
        Categoria = st.selectbox("Categoria", ["Alimenta√ß√£o", "Moradia", "Transporte", "Lazer", "Outros"])
        ValorTotal = st.number_input("Valor", min_value=0.0, step=1.0, format="%.2f")
        FormaPagamento = st.selectbox("Forma de Pagamento", ["Cart√£o de Cr√©dito", "Pix", "TED", "Dinheiro"])
        Respons√°vel = st.selectbox("Respons√°vel", ["Bruno", "Victor"])
        Fornecedor = st.text_input("Fornecedor")
        Projeto = st.selectbox("Projeto", df_projetos["Projeto"].unique())
        NF = st.selectbox("Nota Fiscal", ["Sim", "N√£o"])
        submit = st.form_submit_button("Salvar Despesa")

    if submit:
        nova_despesa = pd.DataFrame({
            "DataPagamento": [DataPagamento],
            "Descri√ß√£o": [Descricao],
            "Categoria": [Categoria],
            "ValorTotal": [ValorTotal],
            "FormaPagamento": [FormaPagamento],
            "Respons√°vel": [Respons√°vel],
            "Fornecedor": [Fornecedor],
            "Projeto": [Projeto],
            "NF": [NF]
        })
        df_despesas = pd.concat([df_despesas, nova_despesa], ignore_index=True)
        salvar_dados(df_despesas, DESPESAS_PATH)
        st.success("Despesa registrada com sucesso!")

########################################## PROJETOS ##########################################

# Tela de Registrar Projeto
def registrar_projeto():
    global df_projetos  # Declara df_projetos como global
    st.title("üèóÔ∏è Registrar Projeto")

    with st.form("form_projeto"):
        Projeto = st.text_input("ID Projeto")
        Cliente = st.text_input("Nome do cliente")
        Localizacao = st.text_input("Localiza√ß√£o")
        Placa = st.selectbox("Placa", ["Sim", "N√£o"])
        Post = st.selectbox("Post", ["Sim", "N√£o"])
        DataInicio = st.date_input("Data de In√≠cio")
        DataFinal = st.date_input("Data Final")
        Contrato = st.selectbox("Contrato", ["Sim", "N√£o"])
        Status = st.selectbox("Status", ["Conclu√≠do", "Em Andamento", "A fazer", "Impedido"])
        Briefing = st.selectbox("Briefing", ["Sim", "N√£o"])
        Arquiteto = st.text_input("Arquiteto")
        Tipo = st.selectbox("Tipo", ["Residencial", "Comercial"])
        Pacote = st.selectbox("Pacote", ["Completo", "Estrutural e Hidr√°ulico", "Estrutural e El√©trico"])
        m2 = st.number_input("m¬≤", min_value=0.0, step=1.0)
        Parcelas = st.number_input("Parcelas", min_value=0, step=1)
        ValorTotal = st.number_input("Valor Total", min_value=0.0, step=1.0, format="%.2f")
        Respons√°velEl√©trico = st.selectbox("Respons√°velEl√©trico", ["Fl√°vio"])
        Respons√°velHidr√°ulico = st.selectbox("Respons√°velHidr√°ulico", ["Fl√°vio"])
        Respons√°velModelagem = st.selectbox("Respons√°velModelagem", ["Bia"])
        Respons√°velDetalhamento = st.selectbox("Respons√°velDetalhamento", ["Bia"])
        submit = st.form_submit_button("Salvar Projeto")

    if submit:
        novo_projeto = pd.DataFrame({
            "Projeto": [Projeto],
            "Cliente": [Cliente],
            "Localizacao": [Localizacao],
            "Placa": [Placa],
            "Post": [Post],
            "DataInicio": [DataInicio],
            "DataFinal": [DataFinal],
            "Contrato": [Contrato],
            "Status": [Status],
            "Briefing": [Briefing],
            "Arquiteto": [Arquiteto],
            "Tipo": [Tipo],
            "Pacote": [Pacote],
            "m2": [m2],
            "Parcelas": [Parcelas],
            "ValorTotal": [ValorTotal],
            "Respons√°velEl√©trico": [Respons√°velEl√©trico],
            "Respons√°velHidr√°ulico": [Respons√°velHidr√°ulico],
            "Respons√°velModelagem": [Respons√°velModelagem],
            "Respons√°velDetalhamento": [Respons√°velDetalhamento]
        })
        df_projetos = pd.concat([df_projetos, novo_projeto], ignore_index=True)
        salvar_dados(df_projetos, PROJETOS_PATH)
        st.success("Projeto registrado com sucesso!")

########################################## DASHBOARD ##########################################

def dashboard():
    st.title("üìä Dashboard Financeiro")

    # C√°lculos
    receitas = df_receitas["ValorTotal"].sum()
    despesas = df_despesas["ValorTotal"].sum()
    saldo = receitas - despesas

    # Cards
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown('<div class="card"><h3>Receitas</h3><p>R$ {:,.2f}</p></div>'.format(receitas), unsafe_allow_html=True)
    with col2:
        st.markdown('<div class="card"><h3>Despesas</h3><p style="color: #e74c3c;">R$ {:,.2f}</p></div>'.format(despesas), unsafe_allow_html=True)
    with col3:
        st.markdown('<div class="card"><h3>Saldo</h3><p>R$ {:,.2f}</p></div>'.format(saldo), unsafe_allow_html=True)

    # Gr√°fico
    if not df_receitas.empty or not df_despesas.empty:
        df_transacoes = pd.concat([df_receitas.assign(Tipo="Receita"), df_despesas.assign(Tipo="Despesa")])
        fig = px.bar(
            df_transacoes,
            x="Categoria",
            y="ValorTotal",
            color="Tipo",
            title="Receitas e Despesas por Categoria",
            barmode="group"
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("Nenhuma transa√ß√£o registrada ainda.")

########################################## RELAT√ìRIOS ##########################################

def relatorios():
    st.title("üìà Relat√≥rios Financeiros")

    if not df_receitas.empty or not df_despesas.empty:
        st.dataframe(df_receitas)
        st.dataframe(df_despesas)
    else:
        st.info("Nenhuma transa√ß√£o registrada ainda.")

########################################## P√ÅGINA PRINCIPAL ##########################################

def main_app():
    st.sidebar.image("imagens/VRZ-LOGO-44.png")
    st.sidebar.title("Menu")
    menu_option = st.sidebar.radio(
        "Selecione a funcionalidade:",
        ("Dashboard", "Registrar Receita", "Registrar Despesa", "Registrar Projeto", "Relat√≥rios", "Sair")
    )

    if menu_option == "Dashboard":
        dashboard()
    elif menu_option == "Registrar Receita":
        registrar_receita()
    elif menu_option == "Registrar Despesa":
        registrar_despesa()
    elif menu_option == "Registrar Projeto":
        registrar_projeto()
    elif menu_option == "Relat√≥rios":
        relatorios()
    elif menu_option == "Sair":
        st.session_state["logged_in"] = False
        st.success("Voc√™ saiu do sistema.")

########################################## EXECU√á√ÉO ##########################################

if __name__ == "__main__":
    if "logged_in" not in st.session_state:
        st.session_state["logged_in"] = False

    if st.session_state["logged_in"]:
        main_app()
    else:
        login_screen()